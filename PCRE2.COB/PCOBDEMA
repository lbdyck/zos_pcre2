       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'PCOBDEMA'.
       AUTHOR. Ze'ev Atlas.
       DATE-WRITTEN. December 2019.
      **************************************************
      *           PCRE2 DEMONSTRATION PROGRAM          *
      **************************************************
      * This is an adaptation to cobol of the original pcre2demo.c
      * Also, it assumes z/OS and EBCDIC, so parts and comments that
      *discuss UNIX/LINUX/WINDOWS were removed or altered, as well as
      *ASCII specificparts.

      * This is a demonstration program to illustrate a
      *straightforward way of calling the PCRE2 regular expression
      *library from a C program.  See the pcre2sample documentation
      *for a short discussion ("man pcre2sample" if you have
      *the PCRE2 man pages installed). PCRE2 is a revised API for
      *the library, and is incompatible with the original PCRE API.

      * There are actually three libraries, each supporting a
      *different code unit width. This demonstration program uses the
      *8-bit library.  This version deals with EBCDIC only.

      * For installing PCRE2 on z/OS, please follow the instructions
      *that came with this package.
      *
      *---------------------------------------------------------------
      * Copyright (c) 2015 Ze'ev Atlas
      * Please refer to the LICENSE document to see all other
      * applicable copyrights.
      *
      *---------------------------------------------------------------
      *Redistribution and use in source and binary forms, with or
      *without modification, are permitted provided that the following
      *conditions are met:

      * 1. Redistributions of source code must retain the above
      * copyright notice, this list of conditions and the following
      * disclaimer.

      * 2. Redistributions in binary form must reproduce the above
      * copyright notice, this list of conditions and the following
      * disclaimer in the documentation and/or other materials
      * provided with the distribution.

      * 3. Neither the name of the University of Cambridge nor the
      * names of its contributors may be used to endorse or promote
      * products derived from this software without specific prior
      * written permission.

      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
      *CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      *---------------------------------------------------------------
      * While the original UNIX/Windows program now supports the
      *testing of the 8-bit, 16-bit and 16-bit PCRE libraries
      *program, the z/OS COBOL (and C) versions support only 8 bit
      *EBCDIC.  Modules such as COMPLIE2 (originally pcre_compile.c)
      *in the library itself, are also specifically compiled for 8 bit
      *EBCDIC.

      *Adaptation of PCOBDEM2 to do some other demonstrations

      *****************************************************************
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       Special-Names.
           SYSIN is Pattern-Input.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT INFILE ASSIGN TO SYSIN.

      *****************************************************************
       DATA DIVISION.
       FILE SECTION.

       FD  INFILE
                RECORDING MODE IS F
                BLOCK CONTAINS 0 RECORDS
                LABEL RECORDS ARE STANDARD.
       01  INPUT-RECORD.
                05  FILLER                PIC X(80).

       WORKING-STORAGE SECTION.
       01  WS-PARM-DATA             PIC X(256) VALUE SPACES.
       01  WS-PARM1                 PIC X(256).
       01  WS-CNT-PARM1             PIC S9(4) COMP.
       01  WS-PARM2                 PIC X(256).
       01  WS-CNT-PARM2             PIC S9(4) COMP.
       01  WS-PARM3                 PIC X(256).
       01  WS-CNT-PARM3             PIC S9(4) COMP.
       01  WS-PARM4                 PIC X(256).
       01  WS-CNT-PARM4             PIC S9(4) COMP.
       01  WS-buffer                PIC X(256).
       01  WS-TALLY-PARM-BUFFER     PIC S9(9) COMP.
       01  tabptr                   USAGE POINTER.
       01 display-comp              PIC -(10)9.
       01 i                         PIC S9(8) COMP.
       01 j                         PIC S9(8) COMP.
       01  d                        PIC S9(8) BINARY.
       01  n                        PIC S9(8) COMP.
       01  filler                   redefines n.
           05 filler                pic xx.
           05 n-x                   pic xx.
       01  always-zero              pic s9(9) binary value zero.
       01  always-256               pic s9(9) binary value 256.
       COPY    PCREWS2.
       COPY    pcre2.
      * define PCRE2_CODE_UNIT_WIDTH 8

       LINKAGE SECTION.
       01  PARM-BUFFER.
           05  PARM-LENGTH         pic S9(4)   comp.
           05  PARM-DATA           pic X(256).
      * Reasonable size for the demo
       01  LS-OVEC.
           05  LS-OVECTOR              pic 9(9) COMP OCCURS 1000
               INDEXED BY LS-OVECTOR-IX.
      * Reasonable size for the demo
       01  LS-NAME-TABLE.
           05 LS-NAME-NUMBER       PIC 9(4) COMP.
           05 LS-NAME              PIC X(1024).
       01  FILLER       REDEFINES LS-NAME-TABLE.
      * This is a dirty trick to allow setting pointer up
           05 LS-NAME-X            PIC X OCCURS 1028
               INDEXED BY LS-NAME-IX.

      *****************************************************************
       PROCEDURE DIVISION USING PARM-BUFFER.

      ****************************************************************
      * Here is the program. The API includes the concept of         *
      * "contexts" for setting up unusual interface requirements for *
      * compiling and matching, \such as custom memory managers and  *
      * non-standard newline definitions. This program does not do   *
      * any of this, so it makes no use of contexts, always passing  *
      * NULL where a context could be given.                         *
      ****************************************************************

      ****************************************************************
      * First, sort out the command line. There is only one possible *
      * option at the moment, "-g" to request repeated matching to   *
      * find all occurrences, like Perl's /g option. We set the      *
      * variable find_all to a non-zero value if the -g option is    *
      * present. Apart from that, there must be exactly two          *
      * arguments.                                                   *
      ****************************************************************
           MOVE 0 TO PCREWS-find-all
      * In Z/OS we accept parameters.
           IF PARM-LENGTH > 0
              MOVE PARM-DATA (1:PARM-LENGTH) TO WS-PARM-DATA
              DISPLAY 'PCOBDEMA - COBOL PARM'
              display
           "----+----1----+----2----+----3----+----4----+----5----+--"
              display WS-PARM-DATA
      * Parse the command line (JCL PARM) the COBOL way :)
              UNSTRING WS-PARM-DATA DELIMITED BY ALL SPACE INTO
                 WS-PARM1 COUNT IN WS-CNT-PARM1
                 WS-PARM2 COUNT IN WS-CNT-PARM2
                 WS-PARM3 COUNT IN WS-CNT-PARM3
                 WS-PARM4 COUNT IN WS-CNT-PARM4
                 TALLYING IN WS-TALLY-PARM-BUFFER
              END-UNSTRING
              MOVE x'00' TO WS-PARM1 (WS-CNT-PARM1 + 1:1)
              MOVE x'00' TO WS-PARM2 (WS-CNT-PARM2 + 1:1)
              MOVE x'00' TO WS-PARM3 (WS-CNT-PARM3 + 1:1)
              MOVE x'00' TO WS-PARM3 (WS-CNT-PARM4 + 1:1)
              if  WS-CNT-PARM1 = 2
                 if WS-PARM1(1:2) = '-g'
                    DISPLAY "g OPTION USED."
                    MOVE 1 TO PCREWS-find-all
                    MOVE WS-PARM2 TO WS-PARM1
                    MOVE WS-CNT-PARM2 TO WS-CNT-PARM1
                    MOVE WS-PARM3 TO WS-PARM2
                    MOVE WS-CNT-PARM3 TO WS-CNT-PARM2
                    MOVE WS-PARM4 TO WS-PARM3
                    MOVE WS-CNT-PARM4 TO WS-CNT-PARM3
                    SUBTRACT 1 FROM WS-TALLY-PARM-BUFFER
                 end-if
              end-if
           END-IF
      * After the options, we require exactly three arguments, which
      * arethe pattern, subject string and the replacement string.
           IF WS-TALLY-PARM-BUFFER NOT = 2
      * Try to read from file, no real error checking
              OPEN INPUT INFILE
              READ INFILE INTO WS-PARM1
              READ INFILE INTO WS-PARM2
              READ INFILE INTO WS-PARM3
              CLOSE INFILE
              DISPLAY 'PCOBDEMA - COBOL READ INPUT'
              display
           "----+----1----+----2----+----3----+----4----+----5----+--"
              display WS-PARM1
              display WS-PARM2
              display WS-PARM3
      *    call 'pcrz_space_to_null_term_str' using
              call 'ZSPC2NUL' using
                                   by reference WS-PARM1
                                   by value 80
              end-call
      * note the returning clause to get the length
      *    call 'pcrz_space_to_null_term_str' using
              call 'ZSPC2NUL' using
                                   by reference WS-PARM2
                                   by value 80
                                   returning WS-CNT-PARM2
              end-call
              call 'ZSPC2NUL' using
                                   by reference WS-PARM3
                                   by value 80
                                   returning WS-CNT-PARM3
              end-call
      * Make strings into null terminated
           END-IF
      * Pattern and subject are char arguments, so they can be
      * straightforwardly cast to PCRE2_SPTR because we are working
      * in 8-bit code units. The subject length is cast to PCRE2_SIZE
      * for completeness, though PCRE2_SIZE is in fact defined to be
      * size_t. */

           SET PCREWS-PATTERN-PTR TO ADDRESS OF WS-PARM1
           SET PCREWS-SUBJECT-PTR TO ADDRESS OF WS-PARM2
           MOVE WS-CNT-PARM2 TO PCREWS-subject-length
           SET PCREWS-REPL-PTR TO ADDRESS OF WS-PARM3
           MOVE WS-CNT-PARM3 TO PCREWS-repl-length
           SET PCREWS-output to address of WS-BUFFER
      * compensate for bug in 'ZSPC2NUL'
      *    ADD 1 TO PCREWS-subject-length
      *    ADD 1 TO PCREWS-repl-length
      *****************************************************************
      * Now we are going to compile the regular expression pattern,   *
      * and handle any errors that are detected.                      *
      *****************************************************************
      * pcre2_code *pcre2_compile(PCRE2_SPTR pattern,
      *  PCRE2_SIZE length, uint32_t options, int *errorcode,
      *  PCRE2_SIZE *erroroffset, pcre2_compile_context *ccontext);
           call 'COMPILE2' using
                by value     pcrews-pattern-ptr
                BY VALUE     PCRE2-ZERO-TERMINATED
                BY VALUE 0
                BY reference PCREWS-errornumber
                BY reference pcrews-erroroffset
                BY VALUE pcrews-null-ptr
                RETURNING PCREWS-RE-PTR
           end-call
      * Explanation:
      * the pattern */
      * indicates pattern is zero-terminated */
      * default options */
      * for error number */
      * for error offset */
      * use default compile context */

      * Compilation failed: print the error message and exit.
      * int pcre2_get_error_message(int errorcode,
      *   PCRE2_UCHAR *buffer, PCRE2_SIZE bufflen);

           if PCREWS-RE-PTR = NULL
              call 'GETERROR' USING
                 BY VALUE PCREWS-errornumber
                 BY REFERENCE WS-BUFFER
                 BY VALUE  256
              end-call
              MOVE PCREWS-ERROROFFSET TO display-comp
              DISPLAY 'PCRE2 compilation failed at offset '
                 display-comp
                 WS-BUFFER
                MOVE 1 TO RETURN-CODE
              GOBACK
           end-if

      *****************************************************************
      * If the compilation succeeded, we call PCRE2 again, in order to*
      * do a pattern match against the subject string. This does just *
      * ONE match. If further matching is needed, it will be done     *
      * below. Before running the match we must set up a match_data   *
      * block for holding the result.  Using                          *
      * pcre2_match_data_create_from_pattern() ensures that the block *
      * is exactly the right size for the number of capturing         *
      * parentheses in the pattern. If you need to know the actual    *
      * size of a match_data block as a number of bytes, you can find *
      * it like this:                                                 *
      *                                                               *
      * PCRE2_SIZE match_data_size =                                  *
      *                     pcre2_get_match_data_size(match_data);    *
      *****************************************************************

      * Using this function ensures that the block is exactly the right
      * size for the number of capturing parentheses in the pattern.

      * pcre2_match_data *pcre2_match_data_create_from_pattern(
      *  const pcre2_code *code, pcre2_general_context *gcontext);

           CALL 'MATCDCFP' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE pcrews-null-ptr
              RETURNING PCREWS-match-data
           end-call

      *****************************************************************
      * Now we are going to substitute the matches with replacement,  *
      * and handle any errors that are detected.                      *
      *****************************************************************
           move 256 to pcrews-outlength
           move zero to PCREWS-OPTION-BITS
           if PCREWS-find-all > 0
                 move PCRE2-SUBSTITUTE-GLOBAL to
                      PCREWS-OPTION-BITS
                 display 'global substitute'
           end-if
      * int PCRE2_CALL_CONVENTION
      * pcre2_substitute(const pcre2_code *code, PCRE2_SPTR subject,
      *   PCRE2_SIZE length, PCRE2_SIZE start_offset, uint32_t options,
      *   pcre2_match_data *match_data, pcre2_match_context *mcontext,
      *   PCRE2_SPTR replacement, PCRE2_SIZE rlength,
      *   PCRE2_UCHAR *buffer, PCRE2_SIZE *blength)
      *Points to the compiled pattern*/
      *Points to the subject string*/
      *Length of the subject string*/
      *Offset in the subject at which to start matching*/
      *Option bits*/
      *Points to a match data block, or is NULL*/
      *Points to a match context, or is NULL*/
      *Points to the replacement string*/
      *Length of the replacement string*/
      *Points to the output buffer*/
      *Points to the length of the output buffer*/

           CALL 'SUBSTIT2' USING
              BY VALUE PCREWS-RE-PTR
              BY VALUE PCREWS-SUBJECT-PTR
              BY VALUE PCREWS-subject-length
              BY VALUE 0
              BY VALUE PCREWS-OPTION-BITS
              BY VALUE PCREWS-match-data
              BY VALUE pcrews-null-ptr
              BY VALUE PCREWS-REPL-PTR
              BY VALUE PCREWS-repl-length
              BY reference WS-BUFFER
              BY reference pcrews-outlength
              RETURNING PCREWS-RC
           end-call

      * Matching failed: handle error cases
           IF PCREWS-RC < 0
              EVALUATE PCREWS-RC
                 WHEN PCRE2-ERROR-NOMATCH
                    DISPLAY "No match"
      * Handle other special cases if you like
                 WHEN OTHER
                    MOVE PCREWS-RC TO display-comp
                    DISPLAY "Matching error " display-comp
              END-EVALUATE
      * Release memory used for the match
      * void pcre2_match_data_free(match_data);
              CALL 'MATCHDFR' USING
                 BY VALUE PCREWS-match-data
              END-CALL
      * data and the compiled pattern.
      * void pcre2_code_free(code);
              CALL 'CODEFREE' USING
                 BY VALUE PCREWS-RE-PTR
              END-CALL
                MOVE 1 TO RETURN-CODE
              GOBACK
           end-if

           MOVE SPACE TO WS-BUFFER
             (pcrews-outlength + 1:256 - pcrews-outlength)
           DISPLAY 'Substituted string: '
           DISPLAY WS-BUFFER.


       EXIT-FOREVER-LOOP.
           CALL 'MATCHDFR' USING
              BY VALUE PCREWS-match-data
           END-CALL
           CALL 'CODEFREE' USING
              BY VALUE PCREWS-RE-PTR
           END-CALL
           MOVE 0 TO RETURN-CODE
           GOBACK.
        COPY DUMPMEM.
        END PROGRAM 'PCOBDEMA'.
      * End of pcre2demo.c
