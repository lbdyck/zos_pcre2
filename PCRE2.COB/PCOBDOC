      * Contributed by:   Ze'ev Atlas  2019.
      * Copyright (c) 2019, Ze'ev Atlas.
      * All rights reserved.

      *---------------------------------------------------------------
      *Redistribution and use in source and binary forms, with or
      *without modification, are permitted provided that the following
      *conditions are met:

      * 1. Redistributions of source code must retain the above
      * copyright notice, this list of conditions and the following
      * disclaimer.

      * 2. Redistributions in binary form must reproduce the above
      * copyright notice, this list of conditions and the following
      * disclaimer in the documentation and/or other materials
      * provided with the distribution.

      * 3. Neither the name of the University of Cambridge nor the
      * names of its contributors may be used to endorse or promote
      * products derived from this software without specific prior
      * written permission.

      *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
      *CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
      *INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      *MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      *DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
      *CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
      *SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
      *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      *LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
      *HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
      *CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
      *OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      *EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      *---------------------------------------------------------------
This document documents the COBOL modules and copybooks available
herein

1. COBOL Library hlq.PCRE2.COB and members' origin in the original
   package

DUMPMEM   A utility function, dumps a chunk of memmory, not a port.
PCOBDEM2  A port of pcre2demo.c to COBOL
PCOBDEMA  A simple adaptation of PCOBDEM2 to demonstarte usage of
          pcre2-substitute (SUBSTIT2)
PCOBDOC   This document
PCRCMPCN  A port of 'typedef struct pcre2_real_compile_context'
PCRE2     A aprtial port of pcre2.h to COBOL
PCRECAL2  A port of 'typedef struct pcre2_callout_block'
          and 'typedef struct pcre2-callout-enumerate-block'
          and 'typedef struct pcre2_substitute_callout_block'
PCRECODE  A port of 'typedef struct pcre2_real_code'
PCRECTXT  A port of 'typedef struct pcre2_real_convert_context'
PCREWS2   Some useful fields for COBOL WORKING-STORAGE SECTION, not a
          port.
PCRGENCN  A port of 'typedef struct pcre2_real_general_context'
PCRMECTL  A port of 'typedef struct pcre2_memctl'
PCRMTCCN  A port of 'typedef struct pcre2_real_match_context'
PCRMTCDA  A port of 'typedef struct pcre2_real_match_data'
REGEX1    A sample program of how to use the IBM POSIX functions, not
          a port.

Six of the above typedef's  are located in pcre2_intmodedep.h in a
section marked as:
----------------------- HIDDEN STRUCTURES ----------------------------
with the NOTE: All these structures *must* start with a pcre2_memctl
structure. The code that uses them is simpler because it assumes this.

ZA Note: You may notice that all copybooks that represent these
structure indeed start with COPY PCRMECTL.  I do NOT expect anybody to
actually refer directly to any field within that structure, so I left
all of them as FILLER.  I will change that if proven to be wrong.

pcre2_real_general_context
pcre2_real_compile_context
pcre2_real_match_context
pcre2_real_convert_context
pcre2_real_code
pcre2_real_match_data

pcre2_memctl is located in pcre2_internal.h

pcre2_callout_block
pcre2_callout_enumerate_block
pcre2_substitute_callout_block

are located in pcre2.h and available to all.

2. Why these ported structures.

The driving force in deciding whether to port structures  to COBOL or
not was whether they are used in pcre2test.c or not.  I figured out
that anything used in that program is likely to be exposed to the
advanced user who may want to go beyond compiling and matching while
structures not exposed in that program are probably internal to the
package and are less likely to ever be used by even an advanced user.
I will  change that if proven to be wrong.

However, in my judgement, the  chance that an ordinary user would ever
use these structures uis slim.  I myself do not use them in my demo
programs.

3. General usage

The copybooks above, all but PCRMECTL use the :prefix: notation
requiring:
        COPY mambername REPLACING ==:PREFIX:== by someprefix
due to long names in the original c code, it is better to limit
prefixes to two characters, lest you surpass the allowd 30 characters
in COBOL names.  The prefix notation allow you to use multiple
instances of the structure as needed, and wherever needed (such as in
WORKING-STORAGE SECTION, LINKAGE SECTION, etc.

PCRECAL2 contains three structurs, all use :PREFIX:-version, so if you
need to refer to that variable use the
        someprefix-version OF someprefix-pcre2-callout-block (or
whichever you are referring to.)

Also see a comment about PCRMECTL above.

4. What is demonstrated and why

The two demo programs demonstrate basic usage of:
COMPILE2  pcre2_compile
MATCH2    pcre2_match
SUBSTIT2  pcre2_substitute
GETOVEPT  pcre2_get_ovector_pointer
MATCDCFP  pcre2_match_data_create_from_pattern
PATTERN2  pcre2_pattern_info
GETERROR  pcre2_get_error_message
CODEFREE  pcre2_code_free
MATCHDFR  pcre2_match_data_free

The original demo program that comes with the library demonstrates the
above functions except of pcre2_substitute.  I added the second demo
program that completes the set.  If you thonk about it, the most
common activities with regex objects are compiling them initially,
Searching or matching the pattern with the subject string and
substituting certain parts of the string with alternative replacemt
strings.  The author of the original demo pogram chose to demonstrate
some fonctions that give a glimpse into the pattern and match data.
Deciphering error meassges and memory bookkeeping (free momory) are
a good idea in any type of programming.

9. Road Map

If all is good and I have time, I will try to choose more functions
and create some more demo programs to demonstrate said funcions.
I encourage my users to do same and contribute, so we all could push
the usage of PCRE2 in the COBOL (and Rexx) context, beyond the minimal
functionality that is demonstrated in the PCOBDEM2 and PCOBDEMOA.

Note that my demo programs tend to be simplified.  I do not play too
much with the available options word, let alone more  complicated
structures.  My goal is to demonstrate the basic functionality, such
as match, substitute and perhaps substring.
