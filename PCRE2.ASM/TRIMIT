TRIMIT   CSECT
TRIMIT   AMODE 31
TRIMIT   RMODE ANY
*
*   This program removes leading and extra blanks from a field
*   so that         '  some  text    in    a  field       x'
*   becomes         'some text in a field x                '
*
*   Optionally, all blanks can be removed from the field by
*   specifying ALL=Y in the TRIM macro resulting in
*                   'sometextinafieldx                     '
*
*   On return R15 contains the number of occupied bytes
*
*   Input parameters generated by the TRIM macro are
*     1, address of a string which should be trimmed
*     2, length of the string
*     3,  0    only remove repeated spaces
*        >0    remove all spaces
*
         SAVE  (14,12)                 save callers registers
         PRINT OFF
         YREGS
         PRINT ON
         LR    R12,R15                 copy base address
         USING TRIMIT,R12
         LR    R9,R1                   copy parameter address
         LM    R4,R6,0(R9)             get address, length and ind
         LA    R3,0(R4,R5)             point after string
         BCTR  R3,0                    point at last byte
*
         CHI   R6,0                    if positive
         BH    TRIM_ALL                trim all blanks
*
*  remove repeated spaces
*
         LA    R6,1                    flag next blank to be removed
STRTLOOP LR    R7,R5                   copy the length
         BCTR  R7,0                    subtract 1 for remaining length
         LR    R2,R7                   copy as inner loop count
         BCTR  R7,0                    subtract 1 for execute
COMPARE  CLI   0(R4),C' '              check if this byte blank
         BNE   SETNO                   no so set flag off
         CHI   R6,1                    is flag on
         BNE   SETYES                  no so set flag on
         LTR   R7,R7                   test remaining length
         BM    ENDLOOP                 negative then finish
         EX    R7,SLIDE_LEFT           slide bytes left
         MVI   0(R3),C' '              blank the last byte
         BCT   R2,COMPARE              loop to go and test again
         B     ENDLOOP                 branch past execute to end
SETYES   LA    R6,1                    flag next blank to be removed
         B     LOOPIT                  go and loop
SETNO    LA    R6,0                    flag next blank to be ignored
LOOPIT   LA    R4,1(,R4)               next byte in field
         BCT   R5,STRTLOOP             loop to check next byte
         B     ENDLOOP
*
*  remove all spaces
*
TRIM_ALL DS    0H
*
STRTLOO2 LR    R7,R5                   copy the length
         BCTR  R7,0                    subtract 1 for remaining length
         LR    R2,R7                   copy as inner loop count
         BCTR  R7,0                    subtract 1 for execute
COMPARE2 CLI   0(R4),C' '              check if this byte blank
         BNE   LOOPIT2                 no so set flag off
         LTR   R7,R7                   test remaining length
         BM    ENDLOOP                 negative then finish
         EX    R7,SLIDE_LEFT           slide bytes left
         MVI   0(R3),C' '              blank the last byte
         BCT   R2,COMPARE2             loop to go and test again
         B     ENDLOOP                 branch past execute to end
LOOPIT2  LA    R4,1(,R4)               next byte in field
         BCT   R5,STRTLOO2             loop to check next byte
*
*  trim accomplished
*
ENDLOOP  DS    0H
*
*  now get count of occupied bytes
*
         LR    R4,R3                   point at last byte
         L     R5,4(,R9)               get length
LOOP2    DS    0H
         CLI   0(R4),C' '              is the byte blank
         BNE   ENDLOOP2                no so quit
         BCTR  R4,0                    point to previous byte
         BCT   R5,LOOP2                loop until 0
ENDLOOP2 DS    0H
*        R5 now has the occupied byte count
         ST    R5,4(,R9)               put count in parameter list
*
GO_BACK  LM    R14,R12,12(R13)         restore callers registers
         L     R15,4(,R1)              load occupied byte count
         BR    R14                     return to caller
*
SLIDE_LEFT     MVC   0(0,R4),1(R4)     sliding move instruction
*
         LTORG
         END
