         MACRO
         PRGDCBO &DCB=SYSOUT,&REC=,&CLEAR=Y,&SPANA=,&SPANL=,&SPANW=
.**********************************************************************
.*
.*     Created by John Gateley
.*
.*     This macro generates code to work with an output DCB.
.*
.*     This macro generates three code segments.
.*
.*        OPEN_&DCB                  code to open the &DCB DCB
.*
.*        PUT_&DCB                   code to write a line to &DCB
.*
.*        CLOSE_&DCB                 code to close the &DCB DCB
.*
.*     It also generates this segment when processing VBS datasets
.*     which is for internal use only.
.*        PUT_&DCB._SEGMENT
.*
.*     &REC=      where the output record will be written from.
.*     &CLEAR=Y   set &REC to spaces after the record is written.
.*           =N   leave the record as it is. If the record is variable
.*                then the RDW will not be set to spaces.
.*
.*     &SPANA     area                     DS    F
.*     &SPANL     length                   DS    F
.*     &SPANW     12 byte work area        DS    3F
.*             adds support for VBS datasets.
.*             To use this facility &SPANA should be a fullword
.*             containing the address of the record area.
.*             SPANL should be a fullword and will contain the length
.*             of the full record.
.*          When using VBS the DCB should be MACRF=PL
.*
.*          PRGDCBO DCB=SYSOUT,REC=MESS_TXT,CLEAR=Y
.*  SYSOUT  DCB   DSORG=PS,MACRF=PM,DDNAME=SYSOUT,RECFM=FB,LRECL=80
.*
         GBLC  &MODNAME
.*
         AIF   (T'&SPANA NE 'O').RECOK
         AIF   (T'&REC NE 'O').RECOK
         MNOTE 16,' REC= variable required'
         MEXIT
.RECOK   ANOP
.*
 SEGS OPEN_&DCB
*                                      open &DCB
         AIF   (T'&SPANA NE 'O').ISLOCMD
         AIF   (T'&REC NE 'O').ISMOVMD
.*
.ISLOCMD ANOP
&TSTMOD  SETC  'LOC'
*                                      Check MACRF2 is locate mode
   IF (TM,&DCB+51,8,Z)
     MVC   MESS_TXT(L'&DCB._WRONG_MODE),&DCB._WRONG_MODE
     SEGDO WRITE_LOG
     PRGQUIT RC=16                     then quit
   ENDIF
         AGO   .ENDMOD
.ISMOVMD ANOP
&TSTMOD  SETC  'MOV'
*                                      Check MACRF2 is move mode
   IF (TM,&DCB+51,16,Z)
     MVC   MESS_TXT(L'&DCB._WRONG_MODE),&DCB._WRONG_MODE
     SEGDO WRITE_LOG
     PRGQUIT RC=16                     then quit
   ENDIF
.ENDMOD  ANOP
*
.*       allow for DCB in getmained storage
   LA    R14,&DCB
   OPEN  ((R14),OUTPUT),MODE=31
.* OPEN  (&DCB,OUTPUT),MODE=31
   IF (LTR,R15,R15,NZ)                 quit if failed, gives RC=16
     WTO   '//&DCB     DD  ...         must be present in JCL',        /
               ROUTCDE=11,MCSFLAG=HRDCPY
     PRGQUIT RC=16
   ENDIF
*
   SEGQUIT
*
&DCB._WRONG_MODE   DC    C'&MODNAME - PRGDCBO - &DCB Output DCB not &TS'
               TMOD mode'
*
 SEGE OPEN_&DCB
*______________________________________________________________________
*
 SEGS PUT_&DCB
*
   AIF   (T'&SPANA NE 'O').DOSPAN
.*
   PUT   &DCB,&REC                     put move mode
*
   AIF   ('&CLEAR' EQ 'N').NOCLEAR
.*
&MYLEN1  SETA  L'&REC                  get length of record area
&MYLEN2  SETA  L'&REC-4                get length of record area - RDW
.*
   AIF   (&MYLEN1 GT 256).DOMVCL       <= 256 so use MVC to
   IF (TM,&DCB+36,X'40',NZ)            if variable length
     MVI   &REC+4,C' '                 clear output record
     MVC   &REC+5(L'&REC-5),&REC+4     but not RDW
   ELSE
     MVI   &REC,C' '                   clear output record
     MVC   &REC+1(L'&REC-1),&REC
   ENDIF
   AGO   .NDMVCL
.*
.DOMVCL    ANOP                        > 256 so use MVCL
.*
   IF (TM,&DCB+36,X'40',NZ)            if variable length
     LA    R0,&REC+4                   point to after RDW
     LAY   R1,&MYLEN2                  get length to clear
     LA    R8,1
   ELSE
     LA    R0,&REC                     point to record area
     LAY   R1,&MYLEN1                  get length to clear
     LA    R8,2
   ENDIF
   LA    R15,C' '                      put in a space
   SLL   R15,24                        slide into high byte
   MVCL  R0,R14                        wipe to spaces
.*
.NDMVCL    ANOP
.*
.NOCLEAR ANOP
*
 SEGE PUT_&DCB
.*
         AGO   .AFTSPAN
.*
.DOSPAN  ANOP
.*
   AIF   (T'&SPANL EQ 'O').MISSL
   AIF   (T'&SPANW EQ 'O').MISSW
.*
   IF (TM,&DCB+36,X'08',Z)             if not spanned write error
     MVC   MESS_TXT(L'&DCB._NOT_SPAN),&DCB._NOT_SPAN
     SEGDO WRITE_LOG
     PRGQUIT RC=12                     then quit
   ENDIF
   MVC   &SPANW.(4),&SPANA             copy address of record
   MVC   &SPANW.+4(4),&SPANL           copy length of record
   MVI   &SPANW.+8,0                   indicate complete record
*
   DO INF
     SEGDO PUT_&DCB._SEGMENT           uses locate mode
     LR    R14,R1                      save address of output buffer
     LR    R15,R0                      save length of output buffer
     AHI   R15,-4                      subtract length of RDW/SDW
     XC    0(4,R14),0(R14)             clear RDW/SDW in output
     IF (C,R15,GE,&SPANW.+4)           only or final segment
       L     R15,&SPANW.+4             set length to write
       XC    &SPANW.+4(4),&SPANW.+4    show no more after this
       L     R0,&SPANW                 address to copy from
       IF (CLI,&SPANW.+8,NE,0)         writing segments
         MVI   2(R14),2                show last segment
       ENDIF
     ELSE
       L     R1,&SPANW.+4              get length remaining
       SR    R1,R15                    subtract this length
       ST    R1,&SPANW.+4              save new length remaining
       L     R0,&SPANW                 address to copy from
       L     R1,&SPANW                 address to copy from
       AR    R1,R15                    add this length
       ST    R1,&SPANW                 save new address
       IF (CLI,&SPANW.+8,EQ,0)         writing first segment
         MVI   2(R14),1                show first segment
         MVI   &SPANW.+8,1             show first segment written
       ELSE
         MVI   2(R14),3                show middle segment
       ENDIF
     ENDIF
     LA    R1,4(,R15)                  add RDW/SDW length
     STH   R1,0(R14)                   set RDW/SDW length
     LA    R14,4(,R14)                 point after RDW/SDW in output
     LR    R1,R15                      copy move length
     MVCL  R14,R0                      copy the data
   DOEXIT (CLC,=F'0',EQ,&SPANW.+4)     nothing else to write
   ENDDO
*
   SEGQUIT                             QUIT seg, this keeps error
*                                      message addressable
*
&DCB._NOT_SPAN     DC    C'&DCB Output file not RECFM=VBS'
*
 SEGE PUT_&DCB
*______________________________________________________________________
*
 SEGS PUT_&DCB._SEGMENT
*
   PUT   &DCB
*
 SEGE PUT_&DCB._SEGMENT
.*
.AFTSPAN   ANOP
*______________________________________________________________________
*
 SEGS CLOSE_&DCB
*                                      close &DCB
.*       allow for DCB in getmained storage
   LA    R14,&DCB
   CLOSE ((R14)),MODE=31
.* CLOSE (&DCB),MODE=31
*
 SEGE CLOSE_&DCB
.*
         MEXIT
.MISSL   MNOTE 16,'SPANA defined but not SPANL'
         MEXIT
.MISSW   MNOTE 16,'SPANA defined but not SPANW'
         MEXIT
         MEND
