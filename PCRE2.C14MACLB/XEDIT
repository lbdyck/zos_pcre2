         MACRO
         XEDIT &IN,&INL,&OUT,&PAD=' ',&DEC='.',&DECP=0,                /
               &THOU=',',&SIGN=,&MARK=
.**********************************************************************
.*
.* Created by John Gateley
.*
.*  This macro builds an edit pattern and then EDits the data or
.*  if SIGN is specified an EDMK is used.
.*
.*       &IN   location of the packed field
.*       &INL  length of the packed field
.*       &OUT  where to build the edit pattern and put the result
.*
.*       &PAD  value for pad character       ' '
.*       &DEC  value for decimal point       '.'
.*       &DECP number of decimal places
.*       &THOU value for thousand separator  ','
.*       &SIGN value for sign, e.g.  SIGN=-  SIGN='-'  SIGN=' (CR)'
.*       &MARK if set then use EDMK instead of ED and use the provided
.*             value in the pattern, e.g. MARK=$
.*
.*  XEDIT VAL1_PACK,5,(R6)
.*
.*  XEDIT VAL1_PACK,5,(R6),THOU=         for no thousand separator
.*
.*  XEDIT VAL1_PACK,5,MESSTXT+10,DECP=2,MARK=$
.*
.*  XEDIT VAL1_PACK,3,MESSTXT+10,PAD=0,DEC=',',DECP=2,                /
.*              THOU='.',SIGN=' (CR)'
.*  XEDIT VAL2_PACK,4,MESSTXT+10,PAD=' ',DEC='.',DECP=0,              /
.*              THOU=',',MARK=¢
.*
         AIF   ('&OUT'(1,1) EQ '(').REGO1  * value in register
         LA    R14,&OUT                  * address of output string
         AGO   .NOREGO1
.REGO1   ANOP
&OUTR    SETC  '&IN'(2,K'&IN-2)
         LR    R14,&OUTR                 * address of output string
.NOREGO1 ANOP
.*
&CNT     SETA  0                         * set pattern count to 0
&CNTMRK  SETA  0                         * set EDMK offset to 0
&SEL     SETC  '20'                      * set digit selector
&SIG     SETC  '21'                      * set significant digit sel
&PATN    SETC  ''                        * start with empty pattern
         AIF   ('&PAD' EQ '').NOPAD
         AIF   ('&PAD'(1,1) EQ '''').QUOT1  * value in quotes
&MPAD    SETC  '&PAD'
         AGO   .QUOT1A
.QUOT1   ANOP
&MPAD    SETC  '&PAD'(2,K'&PAD-2)
.QUOT1A  ANOP
&MPAD    SETC  C2X('&MPAD')              * convert to hex
&PATN    SETC  '&PATN&MPAD'              * put in pad character
&MYLEN   SETA  K'&MPAD/2                 * get length of pad
         AIF   (&MYLEN NE 1).MERR1       * can only be one
&CNT     SETA  &CNT+&MYLEN               * add to count in pattern
.NOPAD   ANOP
.*
&LENR    SETA  &INL                      * get input length
&LENR    SETA  &LENR*2                   * multiply by 2
&LENR    SETA  &LENR-1                   * subtract 1 gives no. digits
&LENR    SETA  &LENR-&DECP               * subtract number of decimals
.*
.AGAIN   ANOP
         AIF   (&LENR EQ 2).IS2
&PATN    SETC  '&PATN&SEL'               * put in digit select
         AGO   .NOT2
.IS2     ANOP
&PATN    SETC  '&PATN&SIG'               * put in significant digit
&CNTMRK  SETA  &CNT+1                    * set significant offset
.NOT2    ANOP
&CNT     SETA  &CNT+1                    * add to count in pattern
&LENR    SETA  &LENR-1                   * subtract 1 from remaining
         AIF   (&LENR EQ 0).NOAGIN
&LENT    SETA  (&LENR/3)*3               * divide by 3 and multiply
.*
         AIF   ('&THOU' EQ '').NOTHOU    * no thousand separator
         AIF   (&LENT NE &LENR).NOTHOU   * not multiple of 3 left
         AIF   ('&THOU'(1,1) EQ '''').QUOT2  * value in quotes
&MTHOU   SETC  '&THOU'
         AGO   .QUOT2A
.QUOT2   ANOP
&MTHOU   SETC  '&THOU'(2,K'&THOU-2)
.QUOT2A  ANOP
&MTHOU   SETC  C2X('&MTHOU')             * convert to hex
&PATN    SETC  '&PATN&MTHOU'             * put in thousand separator
&MYLEN   SETA  K'&MTHOU/2                * get length of thou separator
         AIF   (&MYLEN NE 1).MERR2       * can only be one
&CNT     SETA  &CNT+&MYLEN               * add to count in pattern
.NOTHOU  ANOP
         AIF   (&LENR GT 0).AGAIN        * anything remaining - repeat
.*
.NOAGIN  ANOP
.*
.* so now we have run out of digits before the decimal place (if any)
.*
         AIF   (&DECP EQ 0).TRYSGN       * if none try sign
         AIF   ('&DEC' EQ '').TRYSGN      * value in quotes
         AIF   ('&DEC'(1,1) EQ '''').QUOT3  * value in quotes
&MDEC    SETC  '&DEC'
         AGO   .QUOT3A
.QUOT3   ANOP
&MDEC    SETC  '&DEC'(2,K'&DEC-2)
.QUOT3A  ANOP
&MDEC    SETC  C2X('&MDEC')              * convert to hex
&PATN    SETC  '&PATN&MDEC'              * put in decimal separator
&MYLEN   SETA  K'&MDEC/2                 * get length of dec separator
         AIF   (&MYLEN NE 1).MERR3       * can only be one
&CNT     SETA  &CNT+&MYLEN               * add to count in pattern
&LEND    SETA  &DECP                     * copy decimal places
.*
.TRYDEC  ANOP
&PATN    SETC  '&PATN&SEL'               * put in digit select
&CNT     SETA  &CNT+1                    * add to count in pattern
&LEND    SETA  &LEND-1                   * reduce decimal place count
         AIF   (&LEND NE 0).TRYDEC       * places remaining - so loop
.*
.TRYSGN  ANOP
         AIF   ('&SIGN' EQ '').NOSIGN    * sign byte required
         AIF   ('&SIGN'(1,1) EQ '''').QUOT9  * value in quotes
&MSIGN   SETC  '&SIGN'
         AGO   .QUOT9A
.QUOT9   ANOP
&MSIGN   SETC  '&SIGN'(2,K'&SIGN-2)
.QUOT9A  ANOP
&MSIGN   SETC  C2X('&MSIGN')             * convert to hex
&PATN    SETC  '&PATN.&MSIGN'            * put in sign value
&MYLEN   SETA  K'&MSIGN/2                * get length of record area
&CNT     SETA  &CNT+&MYLEN               * add to count in pattern
.NOSIGN  ANOP
.*
         MVC   0(&CNT,R14),=X'&PATN'     * copy pattern to output
         AIF   ('&MARK' NE '').DOMARK
         ED    0(&CNT,R14),&IN           * edit value to output
         MEXIT
.DOMARK  ANOP
         LA    R1,&CNTMRK.(,R14)         * set R1 for EDMK
         EDMK  0(&CNT,R14),&IN           * edit mark value to output
         BCTR  R1,0                      * back of one byte
         MVI   0(R1),C'&MARK'            * put in currency sign
.*
         MEXIT
.MERR1   MNOTE 16,'Pad character can only be 1 byte'
         MEXIT
.MERR2   MNOTE 16,'Thousand separator can only be 1 byte'
         MEXIT
.MERR3   MNOTE 16,'Decimal separator can only be 1 byte'
         MEND
