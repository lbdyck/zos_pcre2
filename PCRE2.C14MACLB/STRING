         MACRO
         STRING  &OUT=MESS_TXT,&WORK=,&SAVE=MY_PARM,&SLEN=0,           /
               &PAD=,&PADB=N,&FPAD=0,&NUM0=N
.**********************************************************************
.*
.*       This macro uses program STRINGIT to concatenate the values
.*       of fields into an area.
.*
.*       This macro takes positional parameters in groups of two,
.*       as many as required. Followed by keyword parameters as
.*       detailed below.
.*
.*       The repeated values are field-name and C,X,B,P,I,U,S or V
.*         C means just copy it (character)
.*         X means output hexadecimal display
.*         B means output binary display
.*         P means packed decimal input, output numeric display
.*         I Fullword integer, output numeric display
.*         U Unsigned fullword integer, output numeric display
.*         S Halfword small integer, output numeric display
.*         V Unsigned halfword small integer, output numeric display
.*
.*       STRING (field1,c,field2,x,(R4),x),OUT=MESS_TXT,WORK=CL32
.*
.*       OUT=    the area in which the string is to be built
.*
.*       WORK=   a 32 byte work area for program STRINGIT
.*       If this is not provided a global macro variable STRWRK
.*       will be used as the work area. If neither of these is
.*       provided the macro will fail to expand.
.*       GBLC  &STRWRK
.*
.*
.*       If the value to be displayed is in a register just use
.*       register notation in the macro i.e. (R6) and use X or I
.*       depending on how you want to view the contents
.*
.*       STRING (field1,c,(R3),x,(R4),i),OUT=MESS_TXT,PAD=|
.*
.*       Note that if you want to use the value of a 64 bit
.*       register you will need to use STG to place the value into
.*       an 8 byte field and use that in the macro.
.*       This is because the actual register value is stored in the
.*       parameter list instead of an address and the parameter
.*       list consists of 32 bit words.
.*
.*       If the PAD= parameter is specified a pad byte will be
.*       included between each field which will contain the specified
.*       value.
.*       PADB=Y means have a pad byte but make it C' '
.*       PADB takes precedence over the PAD= macro parameter
.*
.*       FPAD is the number of pad bytes to be put at the start
.*       of the output area, this is to allow the text to be indented.
.*       Using OUT=MESS_TXT+2 instead of FPAD=2 is not recomended as
.*       although it will indent by 2 it will cause the macro to think
.*       that the output field is 4 bytes longer than it is.
.*       LA    R15,L'MESS_TXT+2 will take the length and add 2 to it
.*       when the effective length should be L'MESS_TXT-2
.*
.*       NUM0=N means do not output leading zeroes from numeric display
.*       change to Y if you want leading zeroes.
.*
.*       If the output message area is not big enough for all the
.*       required fields then program STRINGIT will abend with a
.*       suitable message. As the length of the strung output
.*       will not vary, if this works in test it will work in
.*       production.
.*
.*       The SAVE= parameter specifies an area in which the macro
.*       builds the parameter list for the call to STRINGIT, this
.*       defaults to MY_PARM.
.*
.*       Note that the last parameter will not have the high order
.*       bit set on as STRINGIT processing stops when the value
.*       x'FF' is found in the indicator list. This is because a
.*       register value could be negative.
.*
.*       SLEN= may be used to specify the number of fullwords
.*       available in the parameter list, this ensures that
.*       storage after the end of the parameter list is not
.*       overwritten.
.*       If this is not provided a global macro variable PARMAX
.*       will be used as the count of fullwords. If neither of
.*       these is provided the macro will fail to expand.
.*
.*       GBLA  &PARMAX
.*&PARMAX    SETA  18
.*
.*
.*       After the macro call STRINGIT R1 will contain the address
.*       of the byte after the last one modified. R15 will be zero.
.*
.*       Note that this macro and the STRINGIT program are reentrant.
.*
.*
.*       End of comments, down to business.
.*
.*
&A       SETA  N'&SYSLIST(1)             * get count of values in ( )
&B       SETA  &A/2                      * divide by 2
&C       SETA  1
&D       SETA  1
&E       SETA  6                         * minimum 6 parameters
&F       SETA  &B*2                      * multiply by 2
         AIF   (&F NE &A).NOTEVEN        * not equal means not even
.*
         LCLC  &INDS
         LCLA  &PARMS
         GBLA  &PARMAX
         GBLC  &STRWRK
.*
         AIF   ('&NUM0' EQ 'Y').NUMOK    * Y is OK
         AIF   ('&NUM0' EQ 'N').NUMOK    * N is OK
         AGO   .BADNUM
.NUMOK   ANOP
.*
&PARMS   SETA  &PARMAX
         AIF   ('&SLEN' EQ '0').NOTSLEN  * default to PARMAX
&PARMS   SETA  &SLEN
.NOTSLEN ANOP
         AIF   (&PARMS EQ 0).NOLEN       * flag expansion error
         AIF   (&PARMS LT 6).TOOMUCH     * filled up parameter area
.*
         AIF   (T'&OUT EQ 'O').NOOUT     * output area provided
.*
         AIF   (T'&WORK NE 'O').YESWORK  * work area provided
         AIF   ('&STRWRK' NE '').STWORK  * default to STRWRK
         AGO   .NOWORK
.YESWORK ANOP
&WRK     SETC  '&WORK'                   * use provided work area
         AGO   .AFTWORK
.STWORK  ANOP
&WRK     SETC  '&STRWRK'
.AFTWORK ANOP
.*
.*       first put in the address of the indicators, followed by
.*       the start and length of the output area and finally
.*       the work area address.
.*
         LA    R14,I&SYSNDX              * point to list of indicators
         LA    R15,&OUT                  * address of output string
         LA    R0,L'&OUT                 * length of output string
         LA    R1,&WRK                   * work area for STRINGIT
         STM   R14,R1,&SAVE              * save in parameters 1,2,3 + 4
         LA    R1,&SAVE+16               * point to fifth parameter
.*
.AGAIN   ANOP
.*                                       * is value in a register?
&RVAL    SETC  '&SYSLIST(1,&C)'
         AIF   ('&RVAL'(1,1) EQ '(').REGVAL
.*                                       * not register notation
         AIF   ('&RVAL'(1,1) EQ '''').QUOTVAL
.*                                       * not quoted string
         LA    R14,&SYSLIST(1,&C)        * sending field
         LA    R15,L'&SYSLIST(1,&C)      * length
         AGO   .AFTREG
.*
.QUOTVAL ANOP
&QLEN    SETA  K'&RVAL-2
         LA    R14,=C&RVAL
         LA    R15,&QLEN
         AGO   .AFTREG
.*
.REGVAL  ANOP
&RVAL2   SETC  '&SYSLIST(1,&C)'(2,K'&SYSLIST(1,&C)-2)
.*                                       * register notation
         LR    R14,&RVAL2                * copy register value
         LHI   R15,-4                    * say -4 to show in register
.*
.AFTREG  ANOP
         STM   R14,R15,0(R1)             * save in parameter list
.*
         AIF   ('&D' GE '&B').DONE1      * done last value?
&C       SETA  &C+2
&D       SETA  &D+1
&E       SETA  &E+2
         AIF   (&E GT &PARMS).TOOMUCH    * filled up parameter area
.DONE0   ANOP
         LA    R1,8(,R1)                 * point past these two
         AGO   .AGAIN                    * process next value
.DONE1   ANOP
.*
&A       SETA  N'&SYSLIST(1)             * get count of values
&B       SETA  &A/2                      * divide by 2
&C       SETA  1
&D       SETA  1
         B     A#&SYSNDX                 * branch past indicators
.*
.*   This code builds a string containing all the specified format
.*   indicators.
.*
.AGAIN2  ANOP
.*
         AIF   ('&SYSLIST(1,&C+1)' EQ 'C').CHAR
         AIF   ('&SYSLIST(1,&C+1)' EQ 'c').CHAR
         AIF   ('&SYSLIST(1,&C+1)' EQ 'X').HEX
         AIF   ('&SYSLIST(1,&C+1)' EQ 'x').HEX
         AIF   ('&SYSLIST(1,&C+1)' EQ 'B').BINARY
         AIF   ('&SYSLIST(1,&C+1)' EQ 'b').BINARY
         AIF   ('&SYSLIST(1,&C+1)' EQ 'P').PACKED
         AIF   ('&SYSLIST(1,&C+1)' EQ 'p').PACKED
         AIF   ('&SYSLIST(1,&C+1)' EQ 'I').INTEGER
         AIF   ('&SYSLIST(1,&C+1)' EQ 'i').INTEGER
         AIF   ('&SYSLIST(1,&C+1)' EQ 'U').UINT
         AIF   ('&SYSLIST(1,&C+1)' EQ 'u').UINT
         AIF   ('&SYSLIST(1,&C+1)' EQ 'S').SMALL
         AIF   ('&SYSLIST(1,&C+1)' EQ 's').SMALL
         AIF   ('&SYSLIST(1,&C+1)' EQ 'V').USMALL
         AIF   ('&SYSLIST(1,&C+1)' EQ 'v').USMALL
         AGO   .NEITHER                  * not valid
.CHAR    ANOP
&INDS    SETC  '&INDS.C'                 * say character
         AGO   .DONE3
.HEX     ANOP
&INDS    SETC  '&INDS.X'                 * say hexadecimal
         AGO   .DONE3
.BINARY  ANOP
&INDS    SETC  '&INDS.B'                 * say binary
         AGO   .DONE3
.PACKED  ANOP
&INDS    SETC  '&INDS.P'                 * say packed decimal
         AGO   .DONE3
.INTEGER ANOP
&INDS    SETC  '&INDS.I'                 * say integer
         AGO   .DONE3
.UINT    ANOP
&INDS    SETC  '&INDS.U'                 * say unsigned integer
         AGO   .DONE3
.SMALL   ANOP
&INDS    SETC  '&INDS.S'                 * say small integer
         AGO   .DONE3
.USMALL  ANOP
&INDS    SETC  '&INDS.V'                 * say unsigned small integer
         AGO   .DONE3
.DONE3   ANOP
.*
         AIF   ('&D' GE '&B').DONE4      * done last value?
&C       SETA  &C+2
&D       SETA  &D+1
         AGO   .AGAIN2                   * process next value
.DONE4   ANOP
.*
         AIF   ('&PADB' EQ 'N').TRYPAD
&UPAD    SETC  'Y '                      * pad with a blank
         AGO   .ENDPAD
.TRYPAD  ANOP
         AIF   (T'&PAD NE 'O').USEPAD    * use provided pad char
&UPAD    SETC  'N '                      * no padding
         AGO   .ENDPAD
.USEPAD  ANOP
&UPAD    SETC  'Y&PAD'                   * use pad character and value
.ENDPAD  ANOP
.*
I&SYSNDX DC    CL15'&UPAD&FPAD&NUM0'     * Currently 4 bytes of global
.*                                       * indicators but allow for 15
         DC    C'&INDS'                  * output all the indicators
         DC    X'FF'                     * flag end of indicators
A#&SYSNDX      DS    0H
         LA    R1,&SAVE                  * point to parameters
         L     R15,=V(STRINGIT)          * get string routine address
         BASR  R14,R15                   * and go there
         MEXIT
.NOTEVEN MNOTE 16,'Number of positional parameters not even'
         MEXIT
.NOOUT   MNOTE 16,'No output area provided OUT='
         MEXIT
.BADNUM  MNOTE 16,'NUM0 not equal to Y or N'
         MEXIT
.NEITHER MNOTE 16,'Second value must be C,X,B,P,I,U,S or V'
         MEXIT
.TOOMUCH MNOTE 16,'Too many values for supplied parameter area'
         MEXIT
.NOLEN   MNOTE 16,'Length of parameter area not supplied, SLEN='
         MEXIT
.NOWORK  MNOTE 16,'No work area was provided, WORK='
         MEND
