         MACRO
         PRGDCBI &DCB=SYSIN,&REC=,&V2F=,&EOF=,&FLAGLEN=,               /
               &SPANA=,&SPANL=,&SPANM=
.**********************************************************************
.*
.*    Created by John Gateley
.*
.*    The easiest way to use this macro is with locate mode on
.*    the DCB and use the V2F parameter to ensure you get
.*    a fixed length record padded with spaces. This works with
.*    either fixed or variable length records.
.*    If you need to do processing based on the record length
.*    then use the REC method.
.*    If you are processing a VBS use the SPAN parameters instead.
.*
.*       This macro generates code to work with an input DCB.
.*
.* NOTE ==> The EODAD on the DCB should be END_&DCB
.*
.*       This macro generates three code segments to do the following
.*
.*          OPEN_&DCB              code to open the &DCB
.*
.*          GET_&DCB               code to read a record from &DCB
.*
.*          CLOSE_&DCB             code to close the &DCB
.*
.*       It also generates this segment when processing VBS datasets
.*       which is for internal use only.
.*          GET_&DCB._SEGMENT
.*
.*     &DCB    the label on the DCB macro.
.*     &REC    is where the input record will be read into
.*             if NOT supplied then locate mode will be used and
.*             R1 will contain the address of the record.
.*     &V2F    Use this when you do not know if the actual file
.*             will be fixed or variable, it will give you fixed.
.*             The record will be read using locate processing
.*             and copied to the specified data area, padded to
.*             the right with blanks.
.*     &FLAGLEN will be set to 'Y' if any records are truncated in
.*             V2F processing.
.*     &EOF    should be 1 byte and will be set to 'Y' when the
.*             end of file has been reached.
.*     &SPANA     area
.*     &SPANL     length
.*     &SPANM     max length
.*             adds support for VBS datasets.
.*             To use this facility &SPANA should be a fullword
.*             containing the address of the record area.
.*             SPANL should be a fullword and will contain the length
.*             of the reconstructed record.
.*             SPANM should be a fullword containing the length of
.*             the data area pointed to by SPANA.
.*             It is envisaged that the data area will be getmained
.*             storage of 1MB to allow plenty of room.
.*             If a record is > than SPANM then the program will
.*             end with RC=12.
.*
.*    This is an example of the code that should be used for SYSIN
.*    In this example all we are doing is counting the records.
.*
.*    SEGDO OPEN_SYSIN                    open the SYSIN file
.*    DO INF
.*      SEGDO GET_SYSIN
.*    DOEXIT (CLI,EOF_SYSIN,EQ,C'Y')      end of file
.*      LA    R3,1(,R3)                   increment count
.*    ENDDO
.*    SEGDO CLOSE_SYSIN                   close the SYSIN file
.*
.*  WARNING - if you have coded MACRF=GL but you get this message
.*    prgname - PRGDCBI - SYSIN Input DCB not MOV mode
.*  at run time, check you are not opening the file a second time
.*  without first closing it.
.*
.*          PRGDCBI DCB=SYSIN,EOF=EOF_SYSIN
.*  SYSIN   DCB   DSORG=PS,DDNAME=SYSIN,MACRF=(GL),EODAD=END_SYSIN
.*
         GBLC  &MODNAME
.*
         AIF   (T'&EOF NE 'O').EOFOK
         MNOTE 16,' EOF variable required'
         MEXIT
.EOFOK   ANOP
.*
 SEGS OPEN_&DCB
*
   MVI   &EOF,C'N'                     indicate NOT end of file
*                                      open &DCB
         AIF   (T'&SPANA NE 'O').ISLOCMD
         AIF   (T'&V2F NE 'O').ISLOCMD
         AIF   (T'&REC NE 'O').ISMOVMD
.*
.ISLOCMD ANOP
&TSTMOD  SETC  'LOC'
*                                      Check MACRF is locate mode
   IF (TM,&DCB+50,8,Z)
     MVC   MESS_TXT(L'&DCB._WRONG_MODE),&DCB._WRONG_MODE
     SEGDO WRITE_LOG
     PRGQUIT RC=16                     then quit
   ENDIF
         AGO   .ENDMOD
.ISMOVMD ANOP
&TSTMOD  SETC  'MOV'
*                                      Check MACRF is move mode
   IF (TM,&DCB+50,16,Z)
     MVC   MESS_TXT(L'&DCB._WRONG_MODE),&DCB._WRONG_MODE
     SEGDO WRITE_LOG
     PRGQUIT RC=16                     then quit
   ENDIF
.ENDMOD  ANOP
*
.*       allow for DCB in getmained storage
   LA    R14,&DCB
   OPEN  ((R14),INPUT),MODE=31
.* OPEN  (&DCB,INPUT)
   IF (LTR,R15,R15,NZ)                 quit if failed, gives RC=16
     WTO   '//&DCB     DD  ...         must be present in JCL',        /
               ROUTCDE=11,MCSFLAG=HRDCPY
     PRGQUIT RC=16
   ENDIF
*
   SEGQUIT
*
&DCB._WRONG_MODE   DC    C'&MODNAME - PRGDCBI - &DCB Input DCB not &TST'
               MOD mode'
*
 SEGE OPEN_&DCB
*______________________________________________________________________
*
 SEGS GET_&DCB
*
   MVI   &EOF,C'N'                     indicate NOT end of file
.*
   AIF   (T'&SPANA NE 'O').DOSPAN
.*
   AIF   (T'&V2F NE 'O').V2FPR1
   AIF   (T'&REC NE 'O').MOVMOD
*
.*       Do GET LOCATE processing
   GET   &DCB                          get locate mode
   AGO   .AFT
.*
.MOVMOD  ANOP
.*
.*       Do GET MOVE processing
   GET   &DCB,&REC                     get move mode
   AGO   .AFT
.*
.*       Do GET LOCATE and copy to record area
.V2FPR1  ANOP
&MYLEN   SETA  L'&V2F                  get length of record area
   AIF   (&MYLEN GT 256).DOMVCL1       <= 256 so use MVC to
   MVI   &V2F,C' '                     clear to spaces
   MVC   &V2F+1(L'&V2F-1),&V2F
   AGO   .NDMVCL1
.DOMVCL1   ANOP                        > 256 so use MVCL
   LA    R0,&V2F                       point to record area
   LAY   R1,L'&V2F                     get length of record area
   LA    R15,C' '                      put in a space
   SLL   R15,24                        slide into high byte
   MVCL  R0,R14                        wipe to spaces
.NDMVCL1   ANOP
.*
   GET   &DCB
   LH    R15,&DCB+82                   get record length just read
   IF (TM,&DCB+36,X'40',NZ)            if variable length
     LA    R1,4(,R1)                   point past RDW
     AHI   R15,-4                      subtract RDW from length
   ENDIF
   IF (CFI,R15,GT,L'&V2F)              if greater than space available
     LAY   R15,L'&V2F                  get maximum length
     AIF   (T'&FLAGLEN EQ 'O').NOFLAG
     MVI   &FLAGLEN,C'Y'               set truncated flag
.NOFLAG  ANOP
   ENDIF
   IF (CHI,R15,LE,256)                 record small enough for MVC?
     BCTR  R15,0                       less 1 for execute
     EX    R15,&DCB._COPY_INREC        copy record
   ELSE
     LR    R14,R1                      copy address of input record
     LR    R1,R15                      copy length
     LA    R0,&V2F                     point to record area
     MVCL  R0,R14                      copy record
   ENDIF
.AFT     ANOP
*
   SEGQUIT                             quit on good read
*
   AIF   (T'&V2F EQ 'O').V2FPR2
&DCB._COPY_INREC   MVC   &V2F.(0),0(R1)
*
.V2FPR2  ANOP
END_&DCB     DS    0H
*
   MVI   &EOF,C'Y'                     set end of file marker
*
 SEGE GET_&DCB
.*
         AGO   .AFTSPAN
.*
.*       Do GET LOCATE processing with VBS dataset
.*
.DOSPAN  ANOP
.*
   AIF   (T'&SPANL EQ 'O').MISSL
   AIF   (T'&SPANM EQ 'O').MISSM
.*
   IF (TM,&DCB+36,X'08',Z)             if not spanned write error
     MVC   MESS_TXT(L'&DCB._NOT_SPAN),&DCB._NOT_SPAN
     SEGDO WRITE_LOG
     PRGQUIT RC=16                     then quit
   ENDIF
   L     R0,&SPANA                     point to record area
   L     R1,&SPANL                     get last record length
   IF (CFI,R1,EQ,0)                    if 0
     L     R1,&SPANM                   get maximum length
   ENDIF
   XR    R15,R15
   MVCL  R0,R14                        wipe to low values
   XC    &SPANL,&SPANL                 set current length to 0
*
   ST    R2,#MVCLSAV                   save current R2 value
*
   DO INF
     SEGDO GET_&DCB._SEGMENT
   DOEXIT (CLI,&EOF,EQ,C'Y')
     LR    R2,R1                       copy segment address
     LA    R14,4(,R1)                  point past RDW/SDW
     LH    R15,0(,R1)                  get segment length
     AHI   R15,-4                      subtract for RDW/SDW
     L     R0,&SPANA                   point to start of area
     A     R0,&SPANL                   add current length
     LR    R1,R15                      copy segment length
     A     R1,&SPANL                   add current length
     ST    R1,&SPANL                   and save total
     IF (C,R1,GT,&SPANM)               is it too big ?
       MVC   MESS_TXT(L'&DCB._TOO_BIG),&DCB._TOO_BIG
       SEGDO WRITE_LOG
       PRGQUIT RC=16                   then quit
     ENDIF
     LR    R1,R15                      copy segment length again
     MVCL  R0,R14                      copy segment
   DOEXIT (CLI,2(R2),EQ,0)             single segment in record
   DOEXIT (CLI,2(R2),EQ,2)             last segment in record
   ENDDO
*
   L     R2,#MVCLSAV                   restore previous R2 value
*
   SEGQUIT                             QUIT seg, this keeps error
*                                      message addressable
*
&DCB._TOO_BIG      DC    C'&DCB Input record was too big'
&DCB._NOT_SPAN     DC    C'&DCB Input file not RECFM=VBS'
*
 SEGE GET_&DCB
*______________________________________________________________________
*
 SEGS GET_&DCB._SEGMENT
*
   MVI   &EOF,C'N'
*
   GET   &DCB
*
   SEGQUIT
*
END_&DCB     DS    0H
*
   MVI   &EOF,C'Y'                     set end of file marker
*
 SEGE GET_&DCB._SEGMENT
.*
.AFTSPAN   ANOP
*______________________________________________________________________
*
 SEGS CLOSE_&DCB
*                                      close &DCB
.*       allow for DCB in getmained storage
   LA    R14,&DCB
   CLOSE ((R14)),MODE=31
.* CLOSE (&DCB)
*                                      freepool &DCB
   FREEPOOL &DCB                       ensure buffer pool cleared
*
 SEGE CLOSE_&DCB
.*
         MEXIT
.MISSL   MNOTE 16,'SPANA defined but not SPANL'
         MEXIT
.MISSM   MNOTE 16,'SPANA defined but not SPANM'
         MEND
