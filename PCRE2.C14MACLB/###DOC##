The following macros are part of the Concept 14 structured programming
macros which were written by Marvin Kessler in 1970.
They have been amended by John Gateley to use branch relative on
condition instead of branch on condition.

DO
DOEXIT
DOPROC
ELSE
ELSEIF
ENDDO
ENDEVAL
ENDIF
EVALUATE
GBLVARS
GETCC
IF
IFPROC
IFTEST
OTHERWSE
PLIST
POPINS
POPNEST
PUSHINS
PUSHLAB
PUSHNEST
STKINS
TESTNEST
WHEN

JRGTIOT   Copy of the MVT macro IEFTIOT1
          amended to make the DSECTs explicit.

The PRG*  macros are used to create structured programs which can
          be reentrant. Code RENT=Y.

PRGDEF    Module initialisation
          This sets up standard linkage and register equates.
          The modue defaults to AMODE=31 RMODE=ANY but this can
          be overridden.
          The following OPSYN commands are used so that any branch
          statements in macros are converted to branch relative.
          B          OPSYN BRU
          BAL        OPSYN BAS
          BALR       OPSYN BASR
          The LOCTR statement is used to split the module into #DATA
          and #CODE sections with the #DATA section first. The #DATA
          section starts with eye catchers of the module name and
          the assembly timestamp and is based on register 12.
          The FSEG parameter indicates the first code segment to
          be performed. Each code segment reuses register 11 as
          its base register and this is automatically maintained
          when other segments are performed using SEGDO.
          Note, NEVER branch out of a segment as the code base
          register will then have an invalid value and anything
          could happen. To exit a segment use SEGQUIT which returns
          to where the segment was called, or to exit the program
          use PRGQUIT.
          If RENT=Y is used the storage defined between PRGDEF and
          PRGEDEF will be getmained on entry to the program and
          freemained on exit. If RENT=N then this storage will map
          over an area in PRGSTAT.
          Facilities for writing rexx functions are provided by
          use of REXX=Y and INREX=Y. REXX=Y means that the program
          will be called as a rexx function and registers 7 to 10
          will map rexx programming interfaces. INREX=Y means that
          the program will be called by another REXX aware program
          and the registers will be maintained.
          A reentrant form of the WTO macro will be included and
          the field MESS_TXT should be used to build an output
          message and WTOX will write this and clear the area to
          spaces.

PRGEDEF   Module termination - storage defined between these macros
          is based on register 13 after the save area
          This handles exit processing and if rexx is active it
          checks if EVALBLOCK result has been set, if not is is
          populated with the return code in field R_C.
          R_C can be populated with SETRC RC=? or PRGQUIT RC=?.

PRGPARM   grap any parameter from R1 - use for JCL invocation

PRGSTAT   Module static storage for constants and DCB.
          This reestablishes the #DATA LOCTR so that this storage
          is based on register 12 and comes directly after timestamp.

PRGESTAT  Module end of static storage

PRGEND    Module end

PRGDCBI   Generate code segments for an input file (open,get,close)
          works with spanned records

PRGDCBO   Generate code segments for an output file (open,put,close)
          works with spanned records

PRGQUIT   Go directly to the module termination routine

PRGSTEM   Define storage for use in program PROCSTEM which looks
          after dropping and defining a rexx stem variable

SEGDO     perform a segment of code

SEGS      start a segment of code - when used with PRG* macros
          the same register is used as code base in all segments
          so each segment could be up to 4K. Never blow a base.

SEGQUIT   exit from this code segment back to wherever it came from.

SEGE      end of a segment of code

SETRC     set the R_C return code value in PRG*

BEDIT     build an edit pattern to use in ED or EDMK based on the
          size of the packed decimal field.

XEDIT     build an edit pattern to use in ED or EDMK based on the
          size of the packed decimal field and actually execute
          the ED or EDMK.

STRING    acts like the COBOL STRING verb and allows conversion
          of integer and packed-decimal values to numeric and
          register values to hexadecimal display.

STRINGIT  program used by STRING

TRIM      trim blanks from a variable
          removes leading and extra blanks from a variable.
          that is ' A  B ' becomes 'A B   '
          after completion R15 contains the length of the string
          ALL=Y can be used to remove all blanks
          that is ' A  B ' becomes 'AB    '

TRIMIT    program used by TRIM

TSTMP     generate a timestamp from STCKE
          FORMAT=DB2  - CL26'2017-04-01-12.34.56.789012'
                 CHAR - CL20'20170401123456789012'
                 PACK - PL11'020170401123456789012C'

WTOX      does a WTO from MESS_TXT which is defined in PRGDEF
          and then clears MESS_TXT to spaces unless CLEAR=N

LNKBLD    creates a linked list of getmained storage, see PIPECNT
          for example usage.

LNKDEL    deletes all the linked list storage

XEDIT     build an edit pattern and execute it

XPACK     pack a character string to hex       C'C1F1' X'A1'
          uses a translate table that is automatically generated in
          PRGSTAT if XPACK has been used in the program.

XUNPK     unpack a hex string to character     X'A1' C'C1F1'
          uses a translate table that is automatically generated in
          PRGSTAT if XUNPK has been used in the program.

